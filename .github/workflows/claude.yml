name: Claude AI Dungeon Master Agent

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude-ai-dm:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      checks: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run Claude AI DM Agent
        id: claude-ai-dm
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Use Claude Opus for complex AI DM development
          model: "claude-opus-4-1-20250805"
          
          # Enhanced permissions for autonomous development
          additional_permissions: |
            actions: read
            checks: write
            contents: write
            pull-requests: write
            issues: write
          
          # Maximum autonomous capabilities
          max_turns: 10
          timeout_minutes: 25
          
          # AI DM specific tools and commands
          allowed_tools: |
            Bash(npm install)
            Bash(npm run build)
            Bash(npm run test)
            Bash(npm run test:unit)
            Bash(npm run test:integration)
            Bash(npm run test:e2e)
            Bash(npm run lint)
            Bash(npm run typecheck)
            Bash(npx supabase gen types typescript)
            Bash(npx prisma generate)
            Bash(npx playwright test)
          
          # Comprehensive AI DM development instructions
          custom_instructions: |
            # AI Dungeon Master Development Agent
            
            You are an expert AI development agent specializing in building AI Dungeon Master systems.
            
            ## Core Principles
            - Follow TypeScript strict mode and best practices
            - Implement comprehensive error handling and logging
            - Create modular, testable, and maintainable code
            - Use MCP (Model Context Protocol) integration patterns
            - Follow D&D 5e rules and mechanics accurately
            
            ## Architecture Patterns
            - Use clean architecture with clear separation of concerns
            - Implement repository pattern for data access
            - Use dependency injection for testability
            - Create comprehensive TypeScript interfaces and types
            - Follow SOLID principles
            
            ## Database Operations (Supabase)
            - Always create proper migrations for schema changes
            - Implement Row Level Security (RLS) policies
            - Generate TypeScript types from database schema
            - Use real-time subscriptions for live features
            - Implement proper indexing for performance
            
            ## AI DM Specific Requirements
            - Implement narrative generation with context awareness
            - Create procedural content generation systems
            - Build character and campaign management features
            - Implement dice rolling and game mechanics
            - Create session logging and continuity systems
            
            ## Testing Requirements
            - Unit tests for all business logic (Jest)
            - Integration tests for database operations
            - End-to-end tests for user workflows (Playwright)
            - Performance tests for real-time features
            - Minimum 80% code coverage
            
            ## MCP Integration
            - Use Supabase MCP for database operations
            - Use Firecrawl MCP for D&D research and content
            - Use Playwright MCP for automated testing
            - Use GitHub MCP for repository management
            - Use Fetch MCP for external API integrations
            
            ## Documentation
            - Create comprehensive README with setup instructions
            - Document all APIs with OpenAPI/Swagger
            - Include usage examples and tutorials
            - Create architecture decision records (ADRs)
            - Maintain changelog for all releases
            
            ## Security
            - Implement proper authentication and authorization
            - Validate all inputs and sanitize outputs
            - Use environment variables for sensitive data
            - Implement rate limiting and abuse prevention
            - Follow OWASP security guidelines
            
            ## Performance
            - Implement caching strategies for frequently accessed data
            - Use database connection pooling
            - Optimize queries and implement proper indexing
            - Use CDN for static assets
            - Implement lazy loading where appropriate
            
            Always create working, production-ready code with comprehensive tests and documentation.
          
          # Environment variables for development
          claude_env: |
            NODE_ENV: development
            SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
            DATABASE_URL: ${{ secrets.DATABASE_URL }}

